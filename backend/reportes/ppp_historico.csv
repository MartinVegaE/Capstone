/* =======================================
   Reporte PPP histÃ³rico de compras (CSV)
   ======================================= */

app.get('/reportes/ppp_historico.csv', async (_req, res) => {
  try {
    // Traemos productos para metadatos (id, sku, nombre)
    const productos = await prisma.producto.findMany({
      select: { id: true, sku: true, nombre: true },
      orderBy: { id: 'asc' },
    });

    // Traemos TODOS los IngresoItem y calculamos en memoria
    const items = await prisma.ingresoItem.findMany({
      select: { productoId: true, cantidad: true, costoUnitario: true },
    });

    const agg = new Map(); // productId -> { q: sumCantidad, val: sum(cantidad*costo) }
    for (const it of items) {
      const pid = it.productoId;
      const q = Number(it.cantidad) || 0;
      const costo = Number.parseFloat(String(it.costoUnitario)) || 0;
      const cur = agg.get(pid) || { q: 0, val: 0 };
      cur.q += q;
      cur.val += q * costo;
      agg.set(pid, cur);
    }

    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    const ts = new Date().toISOString().slice(0,16).replace(/[:T]/g,'-');
    res.setHeader('Content-Disposition', `attachment; filename="ppp_historico_${ts}.csv"`);

    const header = 'id,sku,nombre,sum_cantidad,sum_valor,ppp_historico\n';
    const body = productos.map(p => {
      const a = agg.get(p.id) || { q: 0, val: 0 };
      const pppHist = a.q > 0 ? (a.val / a.q) : 0;
      return [
        p.id,
        csvEscape(p.sku ?? ''),
        csvEscape(p.nombre ?? ''),
        a.q,
        a.val.toFixed(2),
        pppHist.toFixed(4)
      ].join(',');
    }).join('\n');

    res.send(header + body);
  } catch (e) {
    console.error('[GET /reportes/ppp_historico.csv] Error:', e?.message || e);
    res.status(500).json({ error: e?.message || String(e) });
  }
});
